{
  "version": 3,
  "sources": ["../node_modules/lorem-ipsum/src/constants/formats.ts", "../node_modules/lorem-ipsum/src/constants/units.ts", "../node_modules/lorem-ipsum/src/constants/words.ts", "../node_modules/lorem-ipsum/src/constants/lineEndings.ts", "../node_modules/lorem-ipsum/src/util/capitalize.ts", "../node_modules/lorem-ipsum/src/util/isNode.ts", "../node_modules/lorem-ipsum/src/util/isReactNative.ts", "../node_modules/lorem-ipsum/src/constants/platforms.ts", "../node_modules/lorem-ipsum/src/util/isWindows.ts", "../node_modules/lorem-ipsum/src/util/makeArrayOfLength.ts", "../node_modules/lorem-ipsum/src/util/makeArrayOfStrings.ts", "../node_modules/lorem-ipsum/src/util/index.ts", "../node_modules/lorem-ipsum/src/lib/generator.ts", "../node_modules/lorem-ipsum/src/lib/LoremIpsum.ts", "../node_modules/lorem-ipsum/src/index.ts", "../src/ai-generate.tsx", "../src/utils.tsx"],
  "sourcesContent": ["export const FORMAT_HTML = \"html\";\r\nexport const FORMAT_PLAIN = \"plain\";\r\nexport const FORMATS = [FORMAT_HTML, FORMAT_PLAIN];\r\nexport type LoremFormat = \"plain\" | \"html\";\r\n", "export const UNIT_WORDS = \"words\";\nexport const UNIT_WORD = \"word\";\nexport const UNIT_SENTENCES = \"sentences\";\nexport const UNIT_SENTENCE = \"sentence\";\nexport const UNIT_PARAGRAPHS = \"paragraphs\";\nexport const UNIT_PARAGRAPH = \"paragraph\";\nexport const UNITS = [\n  UNIT_WORDS,\n  UNIT_WORD,\n  UNIT_SENTENCES,\n  UNIT_SENTENCE,\n  UNIT_PARAGRAPHS,\n  UNIT_PARAGRAPH,\n];\nexport type LoremUnit = \"words\" | \"word\" | \"sentences\" | \"sentence\" | \"paragraphs\" | \"paragraph\";\n", "export const WORDS = [\r\n  \"ad\",\r\n  \"adipisicing\",\r\n  \"aliqua\",\r\n  \"aliquip\",\r\n  \"amet\",\r\n  \"anim\",\r\n  \"aute\",\r\n  \"cillum\",\r\n  \"commodo\",\r\n  \"consectetur\",\r\n  \"consequat\",\r\n  \"culpa\",\r\n  \"cupidatat\",\r\n  \"deserunt\",\r\n  \"do\",\r\n  \"dolor\",\r\n  \"dolore\",\r\n  \"duis\",\r\n  \"ea\",\r\n  \"eiusmod\",\r\n  \"elit\",\r\n  \"enim\",\r\n  \"esse\",\r\n  \"est\",\r\n  \"et\",\r\n  \"eu\",\r\n  \"ex\",\r\n  \"excepteur\",\r\n  \"exercitation\",\r\n  \"fugiat\",\r\n  \"id\",\r\n  \"in\",\r\n  \"incididunt\",\r\n  \"ipsum\",\r\n  \"irure\",\r\n  \"labore\",\r\n  \"laboris\",\r\n  \"laborum\",\r\n  \"Lorem\",\r\n  \"magna\",\r\n  \"minim\",\r\n  \"mollit\",\r\n  \"nisi\",\r\n  \"non\",\r\n  \"nostrud\",\r\n  \"nulla\",\r\n  \"occaecat\",\r\n  \"officia\",\r\n  \"pariatur\",\r\n  \"proident\",\r\n  \"qui\",\r\n  \"quis\",\r\n  \"reprehenderit\",\r\n  \"sint\",\r\n  \"sit\",\r\n  \"sunt\",\r\n  \"tempor\",\r\n  \"ullamco\",\r\n  \"ut\",\r\n  \"velit\",\r\n  \"veniam\",\r\n  \"voluptate\",\r\n];\r\n", "export const LINE_ENDINGS = {\r\n  POSIX: \"\\n\",\r\n  WIN32: \"\\r\\n\",\r\n};\r\n", "/**\r\n * @param str  A string that may or may not be capitalized.\r\n * @returns    A capitalized string.\r\n */\r\nconst capitalize = (str: string): string => {\r\n  const trimmed = str.trim();\r\n  return trimmed.charAt(0).toUpperCase() + trimmed.slice(1);\r\n};\r\n\r\nexport default capitalize;\r\n", "/**\r\n * @returns  True if the runtime is NodeJS.\r\n */\r\nconst isNode = (): boolean => {\r\n  return typeof module !== \"undefined\" && !!module.exports;\r\n};\r\n\r\nexport default isNode;\r\n", "/**\r\n * Check if runtime is ReactNative.\r\n * Solution based on https://github.com/knicklabs/lorem-ipsum.js/pull/52/files\r\n *\r\n * @returns  True if runtime is ReactNative.\r\n */\r\nconst isReactNative = (): boolean => {\r\n  let isReactNativeResult: boolean = false;\r\n\r\n  try {\r\n    isReactNativeResult = navigator.product === \"ReactNative\";\r\n  } catch (e) {\r\n    isReactNativeResult = false;\r\n  }\r\n\r\n  return isReactNativeResult;\r\n};\r\n\r\nexport default isReactNative;\r\n", "export const SUPPORTED_PLATFORMS = {\r\n  DARWIN: \"darwin\",\r\n  LINUX: \"linux\",\r\n  WIN32: \"win32\",\r\n};\r\n", "import { SUPPORTED_PLATFORMS } from \"../constants/platforms\";\r\n\r\n/**\r\n * @returns True if process is windows.\r\n */\r\nconst isWindows = (): boolean => {\r\n  let isWindowsResult: boolean = false;\r\n  try {\r\n    isWindowsResult = process.platform === SUPPORTED_PLATFORMS.WIN32;\r\n  } catch (e) {\r\n    isWindowsResult = false;\r\n  }\r\n  return isWindowsResult;\r\n};\r\n\r\nexport default isWindows;\r\n", "/**\r\n * @param length Length \"x\".\r\n * @returns      An array of indexes of length \"x\".\r\n */\r\nconst makeArrayOfLength = (length: number = 0): number[] => {\r\n  return Array.apply(null, Array(length)).map(\r\n    (item: any, index: number): number => index,\r\n  );\r\n};\r\n\r\nexport default makeArrayOfLength;\r\n", "import makeArrayOfLength from \"./makeArrayOfLength\";\r\n/**\r\n * @param length  Length \"x\".\r\n * @returns       An array of strings of length \"x\".\r\n */\r\nconst makeArrayOfStrings = (\r\n  length: number,\r\n  makeString: () => string,\r\n): string[] => {\r\n  const arr = makeArrayOfLength(length);\r\n  return arr.map(() => makeString());\r\n};\r\n\r\nexport default makeArrayOfStrings;\r\n", "import capitalize from \"./capitalize\";\r\nimport isNode from \"./isNode\";\r\nimport isReactNative from \"./isReactNative\";\r\nimport isWindows from \"./isWindows\";\r\nimport makeArrayOfLength from \"./makeArrayOfLength\";\r\nimport makeArrayOfStrings from \"./makeArrayOfStrings\";\r\n\r\nexport {\r\n  capitalize,\r\n  isNode,\r\n  isReactNative,\r\n  isWindows,\r\n  makeArrayOfLength,\r\n  makeArrayOfStrings,\r\n};\r\n", "import { WORDS } from \"../constants/words\";\r\nimport { capitalize, makeArrayOfLength } from \"../util\";\r\n\r\nexport interface IBounds {\r\n  min: number;\r\n  max: number;\r\n}\r\n\r\nexport type IPrng = () => number;\r\n\r\nexport type ISeedRandom = new (seed?: string) => IPrng;\r\n\r\nexport interface IMath {\r\n  seedrandom: ISeedRandom;\r\n}\r\n\r\nexport interface IGeneratorOptions {\r\n  sentencesPerParagraph?: IBounds;\r\n  wordsPerSentence?: IBounds;\r\n  random?: IPrng;\r\n  seed?: string;\r\n  words?: string[];\r\n}\r\n\r\nclass Generator {\r\n  public sentencesPerParagraph: IBounds;\r\n  public wordsPerSentence: IBounds;\r\n  public random: IPrng;\r\n  public words: string[];\r\n\r\n  constructor({\r\n    sentencesPerParagraph = { max: 7, min: 3 },\r\n    wordsPerSentence = { max: 15, min: 5 },\r\n    random,\r\n    seed,\r\n    words = WORDS,\r\n  }: IGeneratorOptions = {}) {\r\n    if (sentencesPerParagraph.min > sentencesPerParagraph.max) {\r\n      throw new Error(\r\n        `Minimum number of sentences per paragraph (${\r\n          sentencesPerParagraph.min\r\n        }) cannot exceed maximum (${sentencesPerParagraph.max}).`,\r\n      );\r\n    }\r\n\r\n    if (wordsPerSentence.min > wordsPerSentence.max) {\r\n      throw new Error(\r\n        `Minimum number of words per sentence (${\r\n          wordsPerSentence.min\r\n        }) cannot exceed maximum (${wordsPerSentence.max}).`,\r\n      );\r\n    }\r\n\r\n    this.sentencesPerParagraph = sentencesPerParagraph;\r\n    this.words = words;\r\n    this.wordsPerSentence = wordsPerSentence;\r\n    this.random = random || Math.random;\r\n  }\r\n\r\n  public generateRandomInteger(min: number, max: number): number {\r\n    return Math.floor(this.random() * (max - min + 1) + min);\r\n  }\r\n\r\n  public generateRandomWords(num?: number): string {\r\n    const { min, max } = this.wordsPerSentence;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.pluckRandomWord()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public generateRandomSentence(num?: number): string {\r\n    return `${capitalize(this.generateRandomWords(num))}.`;\r\n  }\r\n\r\n  public generateRandomParagraph(num?: number): string {\r\n    const { min, max } = this.sentencesPerParagraph;\r\n    const length = num || this.generateRandomInteger(min, max);\r\n    return makeArrayOfLength(length)\r\n      .reduce((accumulator: string, index: number): string => {\r\n        return `${this.generateRandomSentence()} ${accumulator}`;\r\n      }, \"\")\r\n      .trim();\r\n  }\r\n\r\n  public pluckRandomWord(): string {\r\n    const min = 0;\r\n    const max = this.words.length - 1;\r\n    const index = this.generateRandomInteger(min, max);\r\n    return this.words[index];\r\n  }\r\n}\r\n\r\nexport default Generator;\r\n", "import { FORMAT_HTML, FORMAT_PLAIN, FORMATS, LoremFormat } from \"../constants/formats\";\r\nimport { LINE_ENDINGS } from \"../constants/lineEndings\";\r\nimport Generator, { IGeneratorOptions } from \"../lib/generator\";\r\nimport { isNode, isReactNative, isWindows, makeArrayOfStrings } from \"../util\";\r\n\r\nclass LoremIpsum {\r\n  public generator: Generator;\r\n\r\n  constructor(\r\n    options: IGeneratorOptions = {},\r\n    public format: LoremFormat = FORMAT_PLAIN,\r\n    public suffix?: string,\r\n  ) {\r\n    if (FORMATS.indexOf(format.toLowerCase()) === -1) {\r\n      throw new Error(\r\n        `${format} is an invalid format. Please use ${FORMATS.join(\" or \")}.`,\r\n      );\r\n    }\r\n    this.generator = new Generator(options);\r\n  }\r\n\r\n  public getLineEnding() {\r\n    if (this.suffix) {\r\n      return this.suffix;\r\n    }\r\n\r\n    if (!isReactNative() && isNode() && isWindows()) {\r\n      return LINE_ENDINGS.WIN32;\r\n    }\r\n\r\n    return LINE_ENDINGS.POSIX;\r\n  }\r\n\r\n  public formatString(str: string): string {\r\n    if (this.format === FORMAT_HTML) {\r\n      return `<p>${str}</p>`;\r\n    }\r\n    return str;\r\n  }\r\n\r\n  public formatStrings(strings: string[]): string[] {\r\n    return strings.map((str) => this.formatString(str));\r\n  }\r\n\r\n  public generateWords(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomWords(num));\r\n  }\r\n\r\n  public generateSentences(num?: number): string {\r\n    return this.formatString(this.generator.generateRandomParagraph(num));\r\n  }\r\n\r\n  public generateParagraphs(num: number): string {\r\n    const makeString = this.generator.generateRandomParagraph.bind(\r\n      this.generator,\r\n    );\r\n    return this.formatStrings(makeArrayOfStrings(num, makeString)).join(\r\n      this.getLineEnding(),\r\n    );\r\n  }\r\n}\r\n\r\nexport default LoremIpsum;\r\n", "import { LoremFormat, FORMAT_PLAIN } from \"./constants/formats\";\r\nimport {\r\n  LoremUnit,\r\n  UNIT_PARAGRAPH,\r\n  UNIT_PARAGRAPHS,\r\n  UNIT_SENTENCES,\r\n  UNIT_SENTENCE,\r\n  UNIT_WORDS,\r\n  UNIT_WORD,\r\n} from \"./constants/units\";\r\nimport { WORDS } from \"./constants/words\";\r\nimport { IPrng } from \"./lib/generator\";\r\nimport LoremIpsum from \"./lib/LoremIpsum\";\r\n\r\nexport interface ILoremIpsumParams {\r\n  count?: number;\r\n  format?: LoremFormat;\r\n  paragraphLowerBound?: number;\r\n  paragraphUpperBound?: number;\r\n  random?: IPrng;\r\n  sentenceLowerBound?: number;\r\n  sentenceUpperBound?: number;\r\n  units?: LoremUnit;\r\n  words?: string[];\r\n  suffix?: string;\r\n}\r\n\r\nconst loremIpsum = ({\r\n  count = 1,\r\n  format = FORMAT_PLAIN,\r\n  paragraphLowerBound = 3,\r\n  paragraphUpperBound = 7,\r\n  random,\r\n  sentenceLowerBound = 5,\r\n  sentenceUpperBound = 15,\r\n  units = UNIT_SENTENCES,\r\n  words = WORDS,\r\n  suffix = \"\",\r\n}: ILoremIpsumParams = {}): string => {\r\n  const options = {\r\n    random,\r\n    sentencesPerParagraph: {\r\n      max: paragraphUpperBound,\r\n      min: paragraphLowerBound,\r\n    },\r\n    words,\r\n    wordsPerSentence: {\r\n      max: sentenceUpperBound,\r\n      min: sentenceLowerBound,\r\n    },\r\n  };\r\n\r\n  const lorem: LoremIpsum = new LoremIpsum(options, format, suffix);\r\n\r\n  switch (units) {\r\n    case UNIT_PARAGRAPHS:\r\n    case UNIT_PARAGRAPH:\r\n      return lorem.generateParagraphs(count);\r\n    case UNIT_SENTENCES:\r\n    case UNIT_SENTENCE:\r\n      return lorem.generateSentences(count);\r\n    case UNIT_WORDS:\r\n    case UNIT_WORD:\r\n      return lorem.generateWords(count);\r\n    default:\r\n      return \"\";\r\n  }\r\n};\r\n\r\nexport { loremIpsum, LoremIpsum };\r\n", "import { AI, environment, LaunchProps, showToast, Toast } from \"@raycast/api\";\nimport { showError, produceOutput } from \"./utils\";\n\nfunction constructPrompt(topic: string | undefined) {\n  const topicInstructions = topic\n    ? `The topic you should write about is \"${topic}\".`\n    : `Pick a completely random topic to write about. Just make sure all paragraphs are about that topic.`;\n  return `\n    You are only capable of outputting a series of paragraphs. What follows is a set of rules I'd like you to adhere to:\n    - separate paragraphs with a blank line, nothing else\n    - do not write in first person\n    - do not explain what topic you are writing about\n    - use brief and concise language, with a casual tone\n\n    Generate between two and five short paragraphs. ${topicInstructions}\n  `;\n}\n\nexport default async function AICommand(props?: LaunchProps<{ arguments: Arguments.AiGenerate }>) {\n  if (!environment.canAccess(AI)) {\n    await showError(\"You don't have access to AI.\");\n    return;\n  }\n\n  const topic = props?.arguments.topic || undefined;\n  const isRandom = topic === undefined;\n\n  const prompt = constructPrompt(topic);\n\n  const notification = isRandom ? `Generating some random content...` : `Generating content on \"${topic}\"...`;\n\n  await showToast(Toast.Style.Animated, notification);\n\n  const response = await AI.ask(prompt, {\n    model: \"gpt-3.5-turbo\",\n    creativity: \"none\",\n  });\n  const output = response.trim();\n\n  await produceOutput(output);\n}\n", "import { closeMainWindow, Clipboard, getPreferenceValues, showToast, Toast } from \"@raycast/api\";\nimport { LoremIpsum } from \"lorem-ipsum\";\n\n// don't want to cause a heap error, so cap it \uD83D\uDE31\nconst LOREM_IPSUM_MAX_NUMBER = 1000;\n\nconst loremIpsumOptions = {\n  sentencesPerParagraph: {\n    max: 8,\n    min: 4,\n  },\n  wordsPerSentence: {\n    max: 16,\n    min: 4,\n  },\n};\n\nconst generator = new LoremIpsum(loremIpsumOptions);\n\nexport const generateParagraphs = (count: number) => {\n  return Array.from(Array(count))\n    .map(() =>\n      generator.generateSentences(\n        Math.floor(\n          Math.random() *\n            (loremIpsumOptions.sentencesPerParagraph.max - loremIpsumOptions.sentencesPerParagraph.min + 1),\n        ) + loremIpsumOptions.sentencesPerParagraph.min,\n      ),\n    )\n    .join(\"\\r\\n\\r\\n\"); // newline + seperator line\n};\n\nexport const generateSentences = (count: number) => {\n  return generator.generateSentences(count);\n};\n\nexport const generateWords = (count: number) => {\n  return generator.generateWords(count);\n};\n\nexport const safeLoremIpsumNumberArg = async (arg: string | undefined) => {\n  if (!arg) {\n    arg = \"1\";\n  }\n\n  try {\n    const parseableNumber = parseInt(arg, 10);\n\n    // number and valid/within range?\n    if (isNaN(parseableNumber) || parseableNumber > LOREM_IPSUM_MAX_NUMBER) {\n      return {\n        error: {\n          message: `Please enter a valid integer number, no more than ${LOREM_IPSUM_MAX_NUMBER}`,\n        },\n        safeLoremIpsumNumber: null,\n      };\n    }\n\n    // all good\n    return {\n      error: null,\n      safeLoremIpsumNumber: parseableNumber,\n    };\n  } catch (e) {\n    // generic error\n    return {\n      error: {\n        message: \"Something went wrong\",\n      },\n      safeLoremIpsumNumber: null,\n    };\n  }\n};\n\nexport const showError = async (msg: string) => {\n  await closeMainWindow();\n  await showToast(Toast.Style.Failure, msg);\n};\n\nexport const produceOutput = async (content: string) => {\n  const { action: preference = \"clipboard\" } = getPreferenceValues();\n\n  await closeMainWindow();\n\n  switch (preference) {\n    case \"clipboard\":\n      await Clipboard.copy(content);\n      await showToast(Toast.Style.Success, \"Copied to clipboard! \uD83D\uDCCB\");\n      break;\n\n    case \"paste\":\n      await Clipboard.paste(content);\n      await showToast(Toast.Style.Success, \"Pasted to active app! \uD83D\uDCDD\");\n      break;\n  }\n};\n"],
  "mappings": "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",
  "names": ["FORMAT_HTML", "FORMAT_PLAIN", "FORMATS", "UNIT_WORDS", "UNIT_WORD", "UNIT_SENTENCES", "UNIT_SENTENCE", "UNIT_PARAGRAPHS", "UNIT_PARAGRAPH", "UNITS", "WORDS", "LINE_ENDINGS", "POSIX", "WIN32", "capitalize", "str", "trimmed", "trim", "charAt", "toUpperCase", "slice", "isNode", "module", "exports", "isReactNative", "isReactNativeResult", "navigator", "product", "SUPPORTED_PLATFORMS", "DARWIN", "LINUX", "WIN32", "_platforms", "isWindows", "isWindowsResult", "process", "platform", "SUPPORTED_PLATFORMS", "WIN32", "makeArrayOfLength", "length", "Array", "apply", "map", "item", "index", "_makeArrayOfLength", "_interopRequireDefault", "makeArrayOfStrings", "length", "makeString", "arr", "makeArrayOfLength", "map", "_capitalize", "_interopRequireDefault", "_isNode", "_isReactNative", "_isWindows", "_makeArrayOfLength", "_makeArrayOfStrings", "_words", "_util", "Generator", "_ref", "_ref$sentencesPerPara", "sentencesPerParagraph", "max", "min", "_ref$wordsPerSentence", "wordsPerSentence", "random", "seed", "_ref$words", "words", "WORDS", "_classCallCheck", "_defineProperty", "Error", "Math", "floor", "num", "_this", "_this$wordsPerSentenc", "length", "generateRandomInteger", "makeArrayOfLength", "reduce", "accumulator", "index", "pluckRandomWord", "trim", "capitalize", "generateRandomWords", "_this2", "_this$sentencesPerPar", "generateRandomSentence", "_formats", "_lineEndings", "_generator", "_interopRequireDefault", "_util", "LoremIpsum", "options", "format", "FORMAT_PLAIN", "suffix", "_classCallCheck", "_defineProperty", "FORMATS", "indexOf", "toLowerCase", "Error", "join", "generator", "Generator", "isReactNative", "isNode", "isWindows", "LINE_ENDINGS", "WIN32", "POSIX", "str", "FORMAT_HTML", "strings", "_this", "map", "formatString", "num", "generateRandomWords", "generateRandomParagraph", "makeString", "bind", "formatStrings", "makeArrayOfStrings", "getLineEnding", "_formats", "_units", "_words", "_LoremIpsum", "_interopRequireDefault", "loremIpsum", "_ref", "_ref$count", "count", "_ref$format", "format", "FORMAT_PLAIN", "_ref$paragraphLowerBo", "paragraphLowerBound", "_ref$paragraphUpperBo", "paragraphUpperBound", "random", "_ref$sentenceLowerBou", "sentenceLowerBound", "_ref$sentenceUpperBou", "sentenceUpperBound", "_ref$units", "units", "UNIT_SENTENCES", "_ref$words", "words", "WORDS", "_ref$suffix", "suffix", "options", "sentencesPerParagraph", "max", "min", "wordsPerSentence", "lorem", "LoremIpsum", "UNIT_PARAGRAPHS", "UNIT_PARAGRAPH", "generateParagraphs", "UNIT_SENTENCE", "generateSentences", "UNIT_WORDS", "UNIT_WORD", "generateWords", "ai_generate_exports", "__export", "AICommand", "__toCommonJS", "import_api", "import_api", "import_lorem_ipsum", "loremIpsumOptions", "generator", "showError", "msg", "produceOutput", "content", "preference", "constructPrompt", "topic", "AICommand", "props", "showError", "isRandom", "prompt", "notification", "output", "produceOutput"]
}
